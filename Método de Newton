#METODO DE NEWTON
from math import *
import numpy as np
import matplotlib . pyplot as plt
def funcion1(x):
    return np.exp(x) + 2**(-x)+ 2*cos(x)-6
def d1(x):
    return np.exp(x) - (np.log(2)/( 2**(x))) -2*sin(x)
    
# Se guardan valores iniciales
pi=1.1
# Se ingresan datos de entrada para los diferentes métodos 
a = 1
b = 2

#Se guardan valores iniciales del error y del número de iteraciones
tol = 0.000000001  #float(input("Introduzca el valor de la tolerancia: "))
nmax = 20 #float(input("Introduzca el número máximo de iteraciones: "))
error = 100
niter = 0
#Se evalua de la función en los puntos a, b y m

i=1
print("no. it  \t\t P  \t\t error")
print("{0} \t\t {1:6.4f}  \t {2:6.4f}".format(i, pi, error ))

# ciclo iterativo que determinará la raíz al parar
while error > tol and i <= nmax:
    fa=funcion1(pi)  
    da=d1(pi)
    p = pi - (fa/da)
    error = abs(p - pi)

    pi=p
    i += 1
    print("{0} \t\t {1:6.6f} \t {2:6.6f}".format(i, p,error ))

print("La raíz obtenida de la función dada en el intervalo [{0:6.4f},{1:6.4f}] se halla en {2:6.7f}".format(a,b,p))
